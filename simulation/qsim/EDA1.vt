// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2017 15:23:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FINAL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FINAL_vlg_sample_tst(
	CLK,
	M0,
	M1,
	M2,
	N0,
	N1,
	N2,
	sampler_tx
);
input  CLK;
input  M0;
input  M1;
input  M2;
input  N0;
input  N1;
input  N2;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or M0 or M1 or M2 or N0 or N1 or N2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FINAL_vlg_check_tst (
	DIG0,
	DIG1,
	DIG2,
	DIG3,
	LM,
	LN,
	Y,
	sampler_rx
);
input  DIG0;
input  DIG1;
input  DIG2;
input  DIG3;
input  LM;
input  LN;
input [6:0] Y;
input sampler_rx;

reg  DIG0_expected;
reg  DIG1_expected;
reg  DIG2_expected;
reg  DIG3_expected;
reg  LM_expected;
reg  LN_expected;
reg [6:0] Y_expected;

reg  DIG0_prev;
reg  DIG1_prev;
reg  DIG2_prev;
reg  DIG3_prev;
reg  LM_prev;
reg  LN_prev;
reg [6:0] Y_prev;

reg  DIG0_expected_prev;
reg  DIG1_expected_prev;
reg  DIG2_expected_prev;
reg  DIG3_expected_prev;
reg  LM_expected_prev;
reg  LN_expected_prev;
reg [6:0] Y_expected_prev;

reg  last_DIG0_exp;
reg  last_DIG1_exp;
reg  last_DIG2_exp;
reg  last_DIG3_exp;
reg  last_LM_exp;
reg  last_LN_exp;
reg [6:0] last_Y_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	DIG0_prev = DIG0;
	DIG1_prev = DIG1;
	DIG2_prev = DIG2;
	DIG3_prev = DIG3;
	LM_prev = LM;
	LN_prev = LN;
	Y_prev = Y;
end

// update expected /o prevs

always @(trigger)
begin
	DIG0_expected_prev = DIG0_expected;
	DIG1_expected_prev = DIG1_expected;
	DIG2_expected_prev = DIG2_expected;
	DIG3_expected_prev = DIG3_expected;
	LM_expected_prev = LM_expected;
	LN_expected_prev = LN_expected;
	Y_expected_prev = Y_expected;
end


// expected Y[ 6 ]
initial
begin
	Y_expected[6] = 1'bX;
	Y_expected[6] = #999000 1'b0;
end 
// expected Y[ 5 ]
initial
begin
	Y_expected[5] = 1'bX;
	Y_expected[5] = #999000 1'b0;
end 
// expected Y[ 4 ]
initial
begin
	Y_expected[4] = 1'bX;
	Y_expected[4] = #999000 1'b0;
end 
// expected Y[ 3 ]
initial
begin
	Y_expected[3] = 1'bX;
	Y_expected[3] = #999000 1'b0;
end 
// expected Y[ 2 ]
initial
begin
	Y_expected[2] = 1'bX;
	Y_expected[2] = #999000 1'b0;
end 
// expected Y[ 1 ]
initial
begin
	Y_expected[1] = 1'bX;
	Y_expected[1] = #999000 1'b0;
end 
// expected Y[ 0 ]
initial
begin
	Y_expected[0] = 1'bX;
	Y_expected[0] = #999000 1'b0;
end 

// expected DIG0
initial
begin
	DIG0_expected = 1'bX;
	DIG0_expected = #999000 1'b0;
end 

// expected DIG1
initial
begin
	DIG1_expected = 1'bX;
	DIG1_expected = #999000 1'b0;
end 

// expected DIG2
initial
begin
	DIG2_expected = 1'bX;
	DIG2_expected = #999000 1'b0;
end 

// expected DIG3
initial
begin
	DIG3_expected = 1'bX;
	DIG3_expected = #999000 1'b0;
end 

// expected LM
initial
begin
	LM_expected = 1'bX;
	LM_expected = #999000 1'b0;
end 

// expected LN
initial
begin
	LN_expected = 1'bX;
	LN_expected = #999000 1'b0;
end 
// generate trigger
always @(DIG0_expected or DIG0 or DIG1_expected or DIG1 or DIG2_expected or DIG2 or DIG3_expected or DIG3 or LM_expected or LM or LN_expected or LN or Y_expected or Y)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DIG0 = %b | expected DIG1 = %b | expected DIG2 = %b | expected DIG3 = %b | expected LM = %b | expected LN = %b | expected Y = %b | ",DIG0_expected_prev,DIG1_expected_prev,DIG2_expected_prev,DIG3_expected_prev,LM_expected_prev,LN_expected_prev,Y_expected_prev);
	$display("| real DIG0 = %b | real DIG1 = %b | real DIG2 = %b | real DIG3 = %b | real LM = %b | real LN = %b | real Y = %b | ",DIG0_prev,DIG1_prev,DIG2_prev,DIG3_prev,LM_prev,LN_prev,Y_prev);
`endif
	if (
		( DIG0_expected_prev !== 1'bx ) && ( DIG0_prev !== DIG0_expected_prev )
		&& ((DIG0_expected_prev !== last_DIG0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG0_expected_prev);
		$display ("     Real value = %b", DIG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIG0_exp = DIG0_expected_prev;
	end
	if (
		( DIG1_expected_prev !== 1'bx ) && ( DIG1_prev !== DIG1_expected_prev )
		&& ((DIG1_expected_prev !== last_DIG1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG1_expected_prev);
		$display ("     Real value = %b", DIG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIG1_exp = DIG1_expected_prev;
	end
	if (
		( DIG2_expected_prev !== 1'bx ) && ( DIG2_prev !== DIG2_expected_prev )
		&& ((DIG2_expected_prev !== last_DIG2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG2_expected_prev);
		$display ("     Real value = %b", DIG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DIG2_exp = DIG2_expected_prev;
	end
	if (
		( DIG3_expected_prev !== 1'bx ) && ( DIG3_prev !== DIG3_expected_prev )
		&& ((DIG3_expected_prev !== last_DIG3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG3_expected_prev);
		$display ("     Real value = %b", DIG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DIG3_exp = DIG3_expected_prev;
	end
	if (
		( LM_expected_prev !== 1'bx ) && ( LM_prev !== LM_expected_prev )
		&& ((LM_expected_prev !== last_LM_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LM_expected_prev);
		$display ("     Real value = %b", LM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LM_exp = LM_expected_prev;
	end
	if (
		( LN_expected_prev !== 1'bx ) && ( LN_prev !== LN_expected_prev )
		&& ((LN_expected_prev !== last_LN_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LN_expected_prev);
		$display ("     Real value = %b", LN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LN_exp = LN_expected_prev;
	end
	if (
		( Y_expected_prev[0] !== 1'bx ) && ( Y_prev[0] !== Y_expected_prev[0] )
		&& ((Y_expected_prev[0] !== last_Y_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Y_exp[0] = Y_expected_prev[0];
	end
	if (
		( Y_expected_prev[1] !== 1'bx ) && ( Y_prev[1] !== Y_expected_prev[1] )
		&& ((Y_expected_prev[1] !== last_Y_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Y_exp[1] = Y_expected_prev[1];
	end
	if (
		( Y_expected_prev[2] !== 1'bx ) && ( Y_prev[2] !== Y_expected_prev[2] )
		&& ((Y_expected_prev[2] !== last_Y_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Y_exp[2] = Y_expected_prev[2];
	end
	if (
		( Y_expected_prev[3] !== 1'bx ) && ( Y_prev[3] !== Y_expected_prev[3] )
		&& ((Y_expected_prev[3] !== last_Y_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Y_exp[3] = Y_expected_prev[3];
	end
	if (
		( Y_expected_prev[4] !== 1'bx ) && ( Y_prev[4] !== Y_expected_prev[4] )
		&& ((Y_expected_prev[4] !== last_Y_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Y_exp[4] = Y_expected_prev[4];
	end
	if (
		( Y_expected_prev[5] !== 1'bx ) && ( Y_prev[5] !== Y_expected_prev[5] )
		&& ((Y_expected_prev[5] !== last_Y_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Y_exp[5] = Y_expected_prev[5];
	end
	if (
		( Y_expected_prev[6] !== 1'bx ) && ( Y_prev[6] !== Y_expected_prev[6] )
		&& ((Y_expected_prev[6] !== last_Y_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Y_exp[6] = Y_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FINAL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg M0;
reg M1;
reg M2;
reg N0;
reg N1;
reg N2;
// wires                                               
wire DIG0;
wire DIG1;
wire DIG2;
wire DIG3;
wire LM;
wire LN;
wire [6:0] Y;

wire sampler;                             

// assign statements (if any)                          
FINAL i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DIG0(DIG0),
	.DIG1(DIG1),
	.DIG2(DIG2),
	.DIG3(DIG3),
	.LM(LM),
	.LN(LN),
	.M0(M0),
	.M1(M1),
	.M2(M2),
	.N0(N0),
	.N1(N1),
	.N2(N2),
	.Y(Y)
);

// M0
initial
begin
	repeat(62)
	begin
		M0 = 1'b0;
		M0 = #80000 1'b1;
		# 80000;
	end
	M0 = 1'b0;
end 

// M1
initial
begin
	repeat(31)
	begin
		M1 = 1'b0;
		M1 = #160000 1'b1;
		# 160000;
	end
	M1 = 1'b0;
end 

// M2
initial
begin
	repeat(15)
	begin
		M2 = 1'b0;
		M2 = #320000 1'b1;
		# 320000;
	end
	M2 = 1'b0;
	M2 = #320000 1'b1;
end 

// N0
initial
begin
	repeat(7)
	begin
		N0 = 1'b0;
		N0 = #640000 1'b1;
		# 640000;
	end
	N0 = 1'b0;
	N0 = #640000 1'b1;
end 

// N1
initial
begin
	repeat(3)
	begin
		N1 = 1'b0;
		N1 = #1280000 1'b1;
		# 1280000;
	end
	N1 = 1'b0;
	N1 = #1280000 1'b1;
end 

// N2
initial
begin
	N2 = 1'b0;
	N2 = #2560000 1'b1;
	N2 = #2560000 1'b0;
	N2 = #2560000 1'b1;
end 

FINAL_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.M0(M0),
	.M1(M1),
	.M2(M2),
	.N0(N0),
	.N1(N1),
	.N2(N2),
	.sampler_tx(sampler)
);

FINAL_vlg_check_tst tb_out(
	.DIG0(DIG0),
	.DIG1(DIG1),
	.DIG2(DIG2),
	.DIG3(DIG3),
	.LM(LM),
	.LN(LN),
	.Y(Y),
	.sampler_rx(sampler)
);
endmodule

